// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository_mock

import (
	"auth/internal/repository"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// AddRoleToUser provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) AddRoleToUser(userID int64, role *repository.Role) error {
	ret := _mock.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleToUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, *repository.Role) error); ok {
		r0 = returnFunc(userID, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_AddRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoleToUser'
type MockAuthRepository_AddRoleToUser_Call struct {
	*mock.Call
}

// AddRoleToUser is a helper method to define mock.On call
//   - userID
//   - role
func (_e *MockAuthRepository_Expecter) AddRoleToUser(userID interface{}, role interface{}) *MockAuthRepository_AddRoleToUser_Call {
	return &MockAuthRepository_AddRoleToUser_Call{Call: _e.mock.On("AddRoleToUser", userID, role)}
}

func (_c *MockAuthRepository_AddRoleToUser_Call) Run(run func(userID int64, role *repository.Role)) *MockAuthRepository_AddRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*repository.Role))
	})
	return _c
}

func (_c *MockAuthRepository_AddRoleToUser_Call) Return(err error) *MockAuthRepository_AddRoleToUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_AddRoleToUser_Call) RunAndReturn(run func(userID int64, role *repository.Role) error) *MockAuthRepository_AddRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) Create(auth *repository.Auth) error {
	ret := _mock.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*repository.Auth) error); ok {
		r0 = returnFunc(auth)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAuthRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - auth
func (_e *MockAuthRepository_Expecter) Create(auth interface{}) *MockAuthRepository_Create_Call {
	return &MockAuthRepository_Create_Call{Call: _e.mock.On("Create", auth)}
}

func (_c *MockAuthRepository_Create_Call) Run(run func(auth *repository.Auth)) *MockAuthRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Auth))
	})
	return _c
}

func (_c *MockAuthRepository_Create_Call) Return(err error) *MockAuthRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_Create_Call) RunAndReturn(run func(auth *repository.Auth) error) *MockAuthRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) Delete(id int64) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAuthRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id
func (_e *MockAuthRepository_Expecter) Delete(id interface{}) *MockAuthRepository_Delete_Call {
	return &MockAuthRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockAuthRepository_Delete_Call) Run(run func(id int64)) *MockAuthRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockAuthRepository_Delete_Call) Return(err error) *MockAuthRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_Delete_Call) RunAndReturn(run func(id int64) error) *MockAuthRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetByEmail(email string) (*repository.Auth, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *repository.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*repository.Auth, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *repository.Auth); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockAuthRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email
func (_e *MockAuthRepository_Expecter) GetByEmail(email interface{}) *MockAuthRepository_GetByEmail_Call {
	return &MockAuthRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *MockAuthRepository_GetByEmail_Call) Run(run func(email string)) *MockAuthRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepository_GetByEmail_Call) Return(auth *repository.Auth, err error) *MockAuthRepository_GetByEmail_Call {
	_c.Call.Return(auth, err)
	return _c
}

func (_c *MockAuthRepository_GetByEmail_Call) RunAndReturn(run func(email string) (*repository.Auth, error)) *MockAuthRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetByID(id int64) (*repository.Auth, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *repository.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (*repository.Auth, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *repository.Auth); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAuthRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id
func (_e *MockAuthRepository_Expecter) GetByID(id interface{}) *MockAuthRepository_GetByID_Call {
	return &MockAuthRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockAuthRepository_GetByID_Call) Run(run func(id int64)) *MockAuthRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockAuthRepository_GetByID_Call) Return(auth *repository.Auth, err error) *MockAuthRepository_GetByID_Call {
	_c.Call.Return(auth, err)
	return _c
}

func (_c *MockAuthRepository_GetByID_Call) RunAndReturn(run func(id int64) (*repository.Auth, error)) *MockAuthRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleFromUser provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) RemoveRoleFromUser(userID int64, role *repository.Role) error {
	ret := _mock.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleFromUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, *repository.Role) error); ok {
		r0 = returnFunc(userID, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_RemoveRoleFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleFromUser'
type MockAuthRepository_RemoveRoleFromUser_Call struct {
	*mock.Call
}

// RemoveRoleFromUser is a helper method to define mock.On call
//   - userID
//   - role
func (_e *MockAuthRepository_Expecter) RemoveRoleFromUser(userID interface{}, role interface{}) *MockAuthRepository_RemoveRoleFromUser_Call {
	return &MockAuthRepository_RemoveRoleFromUser_Call{Call: _e.mock.On("RemoveRoleFromUser", userID, role)}
}

func (_c *MockAuthRepository_RemoveRoleFromUser_Call) Run(run func(userID int64, role *repository.Role)) *MockAuthRepository_RemoveRoleFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*repository.Role))
	})
	return _c
}

func (_c *MockAuthRepository_RemoveRoleFromUser_Call) Return(err error) *MockAuthRepository_RemoveRoleFromUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_RemoveRoleFromUser_Call) RunAndReturn(run func(userID int64, role *repository.Role) error) *MockAuthRepository_RemoveRoleFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) Update(auth *repository.Auth) error {
	ret := _mock.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*repository.Auth) error); ok {
		r0 = returnFunc(auth)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAuthRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - auth
func (_e *MockAuthRepository_Expecter) Update(auth interface{}) *MockAuthRepository_Update_Call {
	return &MockAuthRepository_Update_Call{Call: _e.mock.On("Update", auth)}
}

func (_c *MockAuthRepository_Update_Call) Run(run func(auth *repository.Auth)) *MockAuthRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Auth))
	})
	return _c
}

func (_c *MockAuthRepository_Update_Call) Return(err error) *MockAuthRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_Update_Call) RunAndReturn(run func(auth *repository.Auth) error) *MockAuthRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUser provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) VerifyUser(id int64) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_VerifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUser'
type MockAuthRepository_VerifyUser_Call struct {
	*mock.Call
}

// VerifyUser is a helper method to define mock.On call
//   - id
func (_e *MockAuthRepository_Expecter) VerifyUser(id interface{}) *MockAuthRepository_VerifyUser_Call {
	return &MockAuthRepository_VerifyUser_Call{Call: _e.mock.On("VerifyUser", id)}
}

func (_c *MockAuthRepository_VerifyUser_Call) Run(run func(id int64)) *MockAuthRepository_VerifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockAuthRepository_VerifyUser_Call) Return(err error) *MockAuthRepository_VerifyUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_VerifyUser_Call) RunAndReturn(run func(id int64) error) *MockAuthRepository_VerifyUser_Call {
	_c.Call.Return(run)
	return _c
}
