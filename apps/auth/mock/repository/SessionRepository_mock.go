// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository_mock

import (
	"auth/internal/repository"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionRepository creates a new instance of MockSessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionRepository {
	mock := &MockSessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionRepository is an autogenerated mock type for the SessionRepository type
type MockSessionRepository struct {
	mock.Mock
}

type MockSessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionRepository) EXPECT() *MockSessionRepository_Expecter {
	return &MockSessionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) Create(session *repository.Session) error {
	ret := _mock.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*repository.Session) error); ok {
		r0 = returnFunc(session)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - session
func (_e *MockSessionRepository_Expecter) Create(session interface{}) *MockSessionRepository_Create_Call {
	return &MockSessionRepository_Create_Call{Call: _e.mock.On("Create", session)}
}

func (_c *MockSessionRepository_Create_Call) Run(run func(session *repository.Session)) *MockSessionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Session))
	})
	return _c
}

func (_c *MockSessionRepository_Create_Call) Return(err error) *MockSessionRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionRepository_Create_Call) RunAndReturn(run func(session *repository.Session) error) *MockSessionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) Delete(sessionKey string) error {
	ret := _mock.Called(sessionKey)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(sessionKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSessionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - sessionKey
func (_e *MockSessionRepository_Expecter) Delete(sessionKey interface{}) *MockSessionRepository_Delete_Call {
	return &MockSessionRepository_Delete_Call{Call: _e.mock.On("Delete", sessionKey)}
}

func (_c *MockSessionRepository_Delete_Call) Run(run func(sessionKey string)) *MockSessionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionRepository_Delete_Call) Return(err error) *MockSessionRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionRepository_Delete_Call) RunAndReturn(run func(sessionKey string) error) *MockSessionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) Get(sessionKey string) (*repository.Session, error) {
	ret := _mock.Called(sessionKey)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *repository.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*repository.Session, error)); ok {
		return returnFunc(sessionKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *repository.Session); ok {
		r0 = returnFunc(sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(sessionKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - sessionKey
func (_e *MockSessionRepository_Expecter) Get(sessionKey interface{}) *MockSessionRepository_Get_Call {
	return &MockSessionRepository_Get_Call{Call: _e.mock.On("Get", sessionKey)}
}

func (_c *MockSessionRepository_Get_Call) Run(run func(sessionKey string)) *MockSessionRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionRepository_Get_Call) Return(session *repository.Session, err error) *MockSessionRepository_Get_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionRepository_Get_Call) RunAndReturn(run func(sessionKey string) (*repository.Session, error)) *MockSessionRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) GetAll() ([]*repository.Session, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*repository.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*repository.Session, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*repository.Session); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockSessionRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockSessionRepository_Expecter) GetAll() *MockSessionRepository_GetAll_Call {
	return &MockSessionRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockSessionRepository_GetAll_Call) Run(run func()) *MockSessionRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionRepository_GetAll_Call) Return(sessions []*repository.Session, err error) *MockSessionRepository_GetAll_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *MockSessionRepository_GetAll_Call) RunAndReturn(run func() ([]*repository.Session, error)) *MockSessionRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// HardDelete provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) HardDelete(sessionKey string) error {
	ret := _mock.Called(sessionKey)

	if len(ret) == 0 {
		panic("no return value specified for HardDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(sessionKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionRepository_HardDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HardDelete'
type MockSessionRepository_HardDelete_Call struct {
	*mock.Call
}

// HardDelete is a helper method to define mock.On call
//   - sessionKey
func (_e *MockSessionRepository_Expecter) HardDelete(sessionKey interface{}) *MockSessionRepository_HardDelete_Call {
	return &MockSessionRepository_HardDelete_Call{Call: _e.mock.On("HardDelete", sessionKey)}
}

func (_c *MockSessionRepository_HardDelete_Call) Run(run func(sessionKey string)) *MockSessionRepository_HardDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionRepository_HardDelete_Call) Return(err error) *MockSessionRepository_HardDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionRepository_HardDelete_Call) RunAndReturn(run func(sessionKey string) error) *MockSessionRepository_HardDelete_Call {
	_c.Call.Return(run)
	return _c
}

// HardDeleteAllExpired provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) HardDeleteAllExpired() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HardDeleteAllExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionRepository_HardDeleteAllExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HardDeleteAllExpired'
type MockSessionRepository_HardDeleteAllExpired_Call struct {
	*mock.Call
}

// HardDeleteAllExpired is a helper method to define mock.On call
func (_e *MockSessionRepository_Expecter) HardDeleteAllExpired() *MockSessionRepository_HardDeleteAllExpired_Call {
	return &MockSessionRepository_HardDeleteAllExpired_Call{Call: _e.mock.On("HardDeleteAllExpired")}
}

func (_c *MockSessionRepository_HardDeleteAllExpired_Call) Run(run func()) *MockSessionRepository_HardDeleteAllExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionRepository_HardDeleteAllExpired_Call) Return(err error) *MockSessionRepository_HardDeleteAllExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionRepository_HardDeleteAllExpired_Call) RunAndReturn(run func() error) *MockSessionRepository_HardDeleteAllExpired_Call {
	_c.Call.Return(run)
	return _c
}

// HardDeleteAllInactive provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) HardDeleteAllInactive() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HardDeleteAllInactive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionRepository_HardDeleteAllInactive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HardDeleteAllInactive'
type MockSessionRepository_HardDeleteAllInactive_Call struct {
	*mock.Call
}

// HardDeleteAllInactive is a helper method to define mock.On call
func (_e *MockSessionRepository_Expecter) HardDeleteAllInactive() *MockSessionRepository_HardDeleteAllInactive_Call {
	return &MockSessionRepository_HardDeleteAllInactive_Call{Call: _e.mock.On("HardDeleteAllInactive")}
}

func (_c *MockSessionRepository_HardDeleteAllInactive_Call) Run(run func()) *MockSessionRepository_HardDeleteAllInactive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionRepository_HardDeleteAllInactive_Call) Return(err error) *MockSessionRepository_HardDeleteAllInactive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionRepository_HardDeleteAllInactive_Call) RunAndReturn(run func() error) *MockSessionRepository_HardDeleteAllInactive_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastUsed provides a mock function for the type MockSessionRepository
func (_mock *MockSessionRepository) UpdateLastUsed(sessionKey string) error {
	ret := _mock.Called(sessionKey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastUsed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(sessionKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionRepository_UpdateLastUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastUsed'
type MockSessionRepository_UpdateLastUsed_Call struct {
	*mock.Call
}

// UpdateLastUsed is a helper method to define mock.On call
//   - sessionKey
func (_e *MockSessionRepository_Expecter) UpdateLastUsed(sessionKey interface{}) *MockSessionRepository_UpdateLastUsed_Call {
	return &MockSessionRepository_UpdateLastUsed_Call{Call: _e.mock.On("UpdateLastUsed", sessionKey)}
}

func (_c *MockSessionRepository_UpdateLastUsed_Call) Run(run func(sessionKey string)) *MockSessionRepository_UpdateLastUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionRepository_UpdateLastUsed_Call) Return(err error) *MockSessionRepository_UpdateLastUsed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionRepository_UpdateLastUsed_Call) RunAndReturn(run func(sessionKey string) error) *MockSessionRepository_UpdateLastUsed_Call {
	_c.Call.Return(run)
	return _c
}
