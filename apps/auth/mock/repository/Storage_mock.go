// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository_mock

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function for the type MockStorage
func (_mock *MockStorage) Clear() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockStorage_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Clear() *MockStorage_Clear_Call {
	return &MockStorage_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockStorage_Clear_Call) Run(run func()) *MockStorage_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Clear_Call) Return(err error) *MockStorage_Clear_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Clear_Call) RunAndReturn(run func() error) *MockStorage_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function for the type MockStorage
func (_mock *MockStorage) Del(key string) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockStorage_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key
func (_e *MockStorage_Expecter) Del(key interface{}) *MockStorage_Del_Call {
	return &MockStorage_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *MockStorage_Del_Call) Run(run func(key string)) *MockStorage_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStorage_Del_Call) Return(err error) *MockStorage_Del_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Del_Call) RunAndReturn(run func(key string) error) *MockStorage_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockStorage
func (_mock *MockStorage) Exists(key string) (bool, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockStorage_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - key
func (_e *MockStorage_Expecter) Exists(key interface{}) *MockStorage_Exists_Call {
	return &MockStorage_Exists_Call{Call: _e.mock.On("Exists", key)}
}

func (_c *MockStorage_Exists_Call) Run(run func(key string)) *MockStorage_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStorage_Exists_Call) Return(b bool, err error) *MockStorage_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockStorage_Exists_Call) RunAndReturn(run func(key string) (bool, error)) *MockStorage_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Expire provides a mock function for the type MockStorage
func (_mock *MockStorage) Expire(key string, expiration time.Duration) error {
	ret := _mock.Called(key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Expire")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = returnFunc(key, expiration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type MockStorage_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - key
//   - expiration
func (_e *MockStorage_Expecter) Expire(key interface{}, expiration interface{}) *MockStorage_Expire_Call {
	return &MockStorage_Expire_Call{Call: _e.mock.On("Expire", key, expiration)}
}

func (_c *MockStorage_Expire_Call) Run(run func(key string, expiration time.Duration)) *MockStorage_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockStorage_Expire_Call) Return(err error) *MockStorage_Expire_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Expire_Call) RunAndReturn(run func(key string, expiration time.Duration) error) *MockStorage_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockStorage
func (_mock *MockStorage) Get(key string) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key
func (_e *MockStorage_Expecter) Get(key interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockStorage_Get_Call) Run(run func(key string)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(s string, err error) *MockStorage_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func(key string) (string, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Pop provides a mock function for the type MockStorage
func (_mock *MockStorage) Pop(key string) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockStorage_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - key
func (_e *MockStorage_Expecter) Pop(key interface{}) *MockStorage_Pop_Call {
	return &MockStorage_Pop_Call{Call: _e.mock.On("Pop", key)}
}

func (_c *MockStorage_Pop_Call) Run(run func(key string)) *MockStorage_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStorage_Pop_Call) Return(s string, err error) *MockStorage_Pop_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorage_Pop_Call) RunAndReturn(run func(key string) (string, error)) *MockStorage_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function for the type MockStorage
func (_mock *MockStorage) Push(key string, value string, expiration time.Duration) error {
	ret := _mock.Called(key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = returnFunc(key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockStorage_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - key
//   - value
//   - expiration
func (_e *MockStorage_Expecter) Push(key interface{}, value interface{}, expiration interface{}) *MockStorage_Push_Call {
	return &MockStorage_Push_Call{Call: _e.mock.On("Push", key, value, expiration)}
}

func (_c *MockStorage_Push_Call) Run(run func(key string, value string, expiration time.Duration)) *MockStorage_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockStorage_Push_Call) Return(err error) *MockStorage_Push_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Push_Call) RunAndReturn(run func(key string, value string, expiration time.Duration) error) *MockStorage_Push_Call {
	_c.Call.Return(run)
	return _c
}
