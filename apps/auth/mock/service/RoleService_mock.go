// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service_mock

import (
	"auth/internal/repository"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRoleService creates a new instance of MockRoleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoleService {
	mock := &MockRoleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRoleService is an autogenerated mock type for the RoleService type
type MockRoleService struct {
	mock.Mock
}

type MockRoleService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoleService) EXPECT() *MockRoleService_Expecter {
	return &MockRoleService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRoleService
func (_mock *MockRoleService) Create(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRoleService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRoleService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name
func (_e *MockRoleService_Expecter) Create(name interface{}) *MockRoleService_Create_Call {
	return &MockRoleService_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *MockRoleService_Create_Call) Run(run func(name string)) *MockRoleService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRoleService_Create_Call) Return(err error) *MockRoleService_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRoleService_Create_Call) RunAndReturn(run func(name string) error) *MockRoleService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRoleService
func (_mock *MockRoleService) Delete(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRoleService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRoleService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name
func (_e *MockRoleService_Expecter) Delete(name interface{}) *MockRoleService_Delete_Call {
	return &MockRoleService_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *MockRoleService_Delete_Call) Run(run func(name string)) *MockRoleService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRoleService_Delete_Call) Return(err error) *MockRoleService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRoleService_Delete_Call) RunAndReturn(run func(name string) error) *MockRoleService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockRoleService
func (_mock *MockRoleService) Get(name string) (*repository.Role, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *repository.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*repository.Role, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *repository.Role); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Role)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoleService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRoleService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name
func (_e *MockRoleService_Expecter) Get(name interface{}) *MockRoleService_Get_Call {
	return &MockRoleService_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *MockRoleService_Get_Call) Run(run func(name string)) *MockRoleService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRoleService_Get_Call) Return(role *repository.Role, err error) *MockRoleService_Get_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRoleService_Get_Call) RunAndReturn(run func(name string) (*repository.Role, error)) *MockRoleService_Get_Call {
	_c.Call.Return(run)
	return _c
}
