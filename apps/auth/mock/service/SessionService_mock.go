// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service_mock

import (
	"auth/internal/messages"
	"auth/internal/repository"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionService creates a new instance of MockSessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionService {
	mock := &MockSessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionService is an autogenerated mock type for the SessionService type
type MockSessionService struct {
	mock.Mock
}

type MockSessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionService) EXPECT() *MockSessionService_Expecter {
	return &MockSessionService_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function for the type MockSessionService
func (_mock *MockSessionService) CreateSession(user *repository.Auth) (messages.AuthResponse, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 messages.AuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*repository.Auth) (messages.AuthResponse, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*repository.Auth) messages.AuthResponse); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(messages.AuthResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(*repository.Auth) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionService_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSessionService_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - user
func (_e *MockSessionService_Expecter) CreateSession(user interface{}) *MockSessionService_CreateSession_Call {
	return &MockSessionService_CreateSession_Call{Call: _e.mock.On("CreateSession", user)}
}

func (_c *MockSessionService_CreateSession_Call) Run(run func(user *repository.Auth)) *MockSessionService_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Auth))
	})
	return _c
}

func (_c *MockSessionService_CreateSession_Call) Return(authResponse messages.AuthResponse, err error) *MockSessionService_CreateSession_Call {
	_c.Call.Return(authResponse, err)
	return _c
}

func (_c *MockSessionService_CreateSession_Call) RunAndReturn(run func(user *repository.Auth) (messages.AuthResponse, error)) *MockSessionService_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInactiveSessions provides a mock function for the type MockSessionService
func (_mock *MockSessionService) DeleteInactiveSessions() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteInactiveSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionService_DeleteInactiveSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInactiveSessions'
type MockSessionService_DeleteInactiveSessions_Call struct {
	*mock.Call
}

// DeleteInactiveSessions is a helper method to define mock.On call
func (_e *MockSessionService_Expecter) DeleteInactiveSessions() *MockSessionService_DeleteInactiveSessions_Call {
	return &MockSessionService_DeleteInactiveSessions_Call{Call: _e.mock.On("DeleteInactiveSessions")}
}

func (_c *MockSessionService_DeleteInactiveSessions_Call) Run(run func()) *MockSessionService_DeleteInactiveSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionService_DeleteInactiveSessions_Call) Return(err error) *MockSessionService_DeleteInactiveSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionService_DeleteInactiveSessions_Call) RunAndReturn(run func() error) *MockSessionService_DeleteInactiveSessions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function for the type MockSessionService
func (_mock *MockSessionService) DeleteSession(token string) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionService_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockSessionService_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - token
func (_e *MockSessionService_Expecter) DeleteSession(token interface{}) *MockSessionService_DeleteSession_Call {
	return &MockSessionService_DeleteSession_Call{Call: _e.mock.On("DeleteSession", token)}
}

func (_c *MockSessionService_DeleteSession_Call) Run(run func(token string)) *MockSessionService_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionService_DeleteSession_Call) Return(err error) *MockSessionService_DeleteSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionService_DeleteSession_Call) RunAndReturn(run func(token string) error) *MockSessionService_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function for the type MockSessionService
func (_mock *MockSessionService) GetSession(token string) (repository.Session, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 repository.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (repository.Session, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) repository.Session); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(repository.Session)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionService_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockSessionService_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - token
func (_e *MockSessionService_Expecter) GetSession(token interface{}) *MockSessionService_GetSession_Call {
	return &MockSessionService_GetSession_Call{Call: _e.mock.On("GetSession", token)}
}

func (_c *MockSessionService_GetSession_Call) Run(run func(token string)) *MockSessionService_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionService_GetSession_Call) Return(session repository.Session, err error) *MockSessionService_GetSession_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionService_GetSession_Call) RunAndReturn(run func(token string) (repository.Session, error)) *MockSessionService_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function for the type MockSessionService
func (_mock *MockSessionService) GetUserID(token string) (int64, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int64); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionService_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type MockSessionService_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
//   - token
func (_e *MockSessionService_Expecter) GetUserID(token interface{}) *MockSessionService_GetUserID_Call {
	return &MockSessionService_GetUserID_Call{Call: _e.mock.On("GetUserID", token)}
}

func (_c *MockSessionService_GetUserID_Call) Run(run func(token string)) *MockSessionService_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionService_GetUserID_Call) Return(n int64, err error) *MockSessionService_GetUserID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSessionService_GetUserID_Call) RunAndReturn(run func(token string) (int64, error)) *MockSessionService_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// HardDeleteSessions provides a mock function for the type MockSessionService
func (_mock *MockSessionService) HardDeleteSessions() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HardDeleteSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionService_HardDeleteSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HardDeleteSessions'
type MockSessionService_HardDeleteSessions_Call struct {
	*mock.Call
}

// HardDeleteSessions is a helper method to define mock.On call
func (_e *MockSessionService_Expecter) HardDeleteSessions() *MockSessionService_HardDeleteSessions_Call {
	return &MockSessionService_HardDeleteSessions_Call{Call: _e.mock.On("HardDeleteSessions")}
}

func (_c *MockSessionService_HardDeleteSessions_Call) Run(run func()) *MockSessionService_HardDeleteSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionService_HardDeleteSessions_Call) Return(err error) *MockSessionService_HardDeleteSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionService_HardDeleteSessions_Call) RunAndReturn(run func() error) *MockSessionService_HardDeleteSessions_Call {
	_c.Call.Return(run)
	return _c
}
