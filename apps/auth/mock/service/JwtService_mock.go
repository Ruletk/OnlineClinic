// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service_mock

import (
	"auth/internal/repository"

	"github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJwtService creates a new instance of MockJwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJwtService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJwtService {
	mock := &MockJwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJwtService is an autogenerated mock type for the JwtService type
type MockJwtService struct {
	mock.Mock
}

type MockJwtService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJwtService) EXPECT() *MockJwtService_Expecter {
	return &MockJwtService_Expecter{mock: &_m.Mock}
}

// DeleteToken provides a mock function for the type MockJwtService
func (_mock *MockJwtService) DeleteToken(token string) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJwtService_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type MockJwtService_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - token
func (_e *MockJwtService_Expecter) DeleteToken(token interface{}) *MockJwtService_DeleteToken_Call {
	return &MockJwtService_DeleteToken_Call{Call: _e.mock.On("DeleteToken", token)}
}

func (_c *MockJwtService_DeleteToken_Call) Run(run func(token string)) *MockJwtService_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtService_DeleteToken_Call) Return(err error) *MockJwtService_DeleteToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJwtService_DeleteToken_Call) RunAndReturn(run func(token string) error) *MockJwtService_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateAccessToken provides a mock function for the type MockJwtService
func (_mock *MockJwtService) GenerateAccessToken(user *repository.Auth) (string, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*repository.Auth) (string, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*repository.Auth) string); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*repository.Auth) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtService_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type MockJwtService_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - user
func (_e *MockJwtService_Expecter) GenerateAccessToken(user interface{}) *MockJwtService_GenerateAccessToken_Call {
	return &MockJwtService_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", user)}
}

func (_c *MockJwtService_GenerateAccessToken_Call) Run(run func(user *repository.Auth)) *MockJwtService_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Auth))
	})
	return _c
}

func (_c *MockJwtService_GenerateAccessToken_Call) Return(s string, err error) *MockJwtService_GenerateAccessToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJwtService_GenerateAccessToken_Call) RunAndReturn(run func(user *repository.Auth) (string, error)) *MockJwtService_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePasswordResetToken provides a mock function for the type MockJwtService
func (_mock *MockJwtService) GeneratePasswordResetToken(userId int64) (string, error) {
	ret := _mock.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePasswordResetToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return returnFunc(userId)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) string); ok {
		r0 = returnFunc(userId)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtService_GeneratePasswordResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePasswordResetToken'
type MockJwtService_GeneratePasswordResetToken_Call struct {
	*mock.Call
}

// GeneratePasswordResetToken is a helper method to define mock.On call
//   - userId
func (_e *MockJwtService_Expecter) GeneratePasswordResetToken(userId interface{}) *MockJwtService_GeneratePasswordResetToken_Call {
	return &MockJwtService_GeneratePasswordResetToken_Call{Call: _e.mock.On("GeneratePasswordResetToken", userId)}
}

func (_c *MockJwtService_GeneratePasswordResetToken_Call) Run(run func(userId int64)) *MockJwtService_GeneratePasswordResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockJwtService_GeneratePasswordResetToken_Call) Return(token string, err error) *MockJwtService_GeneratePasswordResetToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockJwtService_GeneratePasswordResetToken_Call) RunAndReturn(run func(userId int64) (string, error)) *MockJwtService_GeneratePasswordResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function for the type MockJwtService
func (_mock *MockJwtService) GenerateToken(payload jwt.MapClaims, expires int64) (string, error) {
	ret := _mock.Called(payload, expires)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(jwt.MapClaims, int64) (string, error)); ok {
		return returnFunc(payload, expires)
	}
	if returnFunc, ok := ret.Get(0).(func(jwt.MapClaims, int64) string); ok {
		r0 = returnFunc(payload, expires)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(jwt.MapClaims, int64) error); ok {
		r1 = returnFunc(payload, expires)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJwtService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - payload
//   - expires
func (_e *MockJwtService_Expecter) GenerateToken(payload interface{}, expires interface{}) *MockJwtService_GenerateToken_Call {
	return &MockJwtService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", payload, expires)}
}

func (_c *MockJwtService_GenerateToken_Call) Run(run func(payload jwt.MapClaims, expires int64)) *MockJwtService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwt.MapClaims), args[1].(int64))
	})
	return _c
}

func (_c *MockJwtService_GenerateToken_Call) Return(s string, err error) *MockJwtService_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJwtService_GenerateToken_Call) RunAndReturn(run func(payload jwt.MapClaims, expires int64) (string, error)) *MockJwtService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateVerificationToken provides a mock function for the type MockJwtService
func (_mock *MockJwtService) GenerateVerificationToken(userId int64) (string, error) {
	ret := _mock.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GenerateVerificationToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return returnFunc(userId)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) string); ok {
		r0 = returnFunc(userId)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtService_GenerateVerificationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateVerificationToken'
type MockJwtService_GenerateVerificationToken_Call struct {
	*mock.Call
}

// GenerateVerificationToken is a helper method to define mock.On call
//   - userId
func (_e *MockJwtService_Expecter) GenerateVerificationToken(userId interface{}) *MockJwtService_GenerateVerificationToken_Call {
	return &MockJwtService_GenerateVerificationToken_Call{Call: _e.mock.On("GenerateVerificationToken", userId)}
}

func (_c *MockJwtService_GenerateVerificationToken_Call) Run(run func(userId int64)) *MockJwtService_GenerateVerificationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockJwtService_GenerateVerificationToken_Call) Return(token string, err error) *MockJwtService_GenerateVerificationToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockJwtService_GenerateVerificationToken_Call) RunAndReturn(run func(userId int64) (string, error)) *MockJwtService_GenerateVerificationToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsPasswordResetToken provides a mock function for the type MockJwtService
func (_mock *MockJwtService) IsPasswordResetToken(token string) (bool, int64) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for IsPasswordResetToken")
	}

	var r0 bool
	var r1 int64
	if returnFunc, ok := ret.Get(0).(func(string) (bool, int64)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) int64); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Get(1).(int64)
	}
	return r0, r1
}

// MockJwtService_IsPasswordResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPasswordResetToken'
type MockJwtService_IsPasswordResetToken_Call struct {
	*mock.Call
}

// IsPasswordResetToken is a helper method to define mock.On call
//   - token
func (_e *MockJwtService_Expecter) IsPasswordResetToken(token interface{}) *MockJwtService_IsPasswordResetToken_Call {
	return &MockJwtService_IsPasswordResetToken_Call{Call: _e.mock.On("IsPasswordResetToken", token)}
}

func (_c *MockJwtService_IsPasswordResetToken_Call) Run(run func(token string)) *MockJwtService_IsPasswordResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtService_IsPasswordResetToken_Call) Return(isValid bool, userId int64) *MockJwtService_IsPasswordResetToken_Call {
	_c.Call.Return(isValid, userId)
	return _c
}

func (_c *MockJwtService_IsPasswordResetToken_Call) RunAndReturn(run func(token string) (bool, int64)) *MockJwtService_IsPasswordResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsVerificationToken provides a mock function for the type MockJwtService
func (_mock *MockJwtService) IsVerificationToken(token string) (bool, int64) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for IsVerificationToken")
	}

	var r0 bool
	var r1 int64
	if returnFunc, ok := ret.Get(0).(func(string) (bool, int64)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) int64); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Get(1).(int64)
	}
	return r0, r1
}

// MockJwtService_IsVerificationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsVerificationToken'
type MockJwtService_IsVerificationToken_Call struct {
	*mock.Call
}

// IsVerificationToken is a helper method to define mock.On call
//   - token
func (_e *MockJwtService_Expecter) IsVerificationToken(token interface{}) *MockJwtService_IsVerificationToken_Call {
	return &MockJwtService_IsVerificationToken_Call{Call: _e.mock.On("IsVerificationToken", token)}
}

func (_c *MockJwtService_IsVerificationToken_Call) Run(run func(token string)) *MockJwtService_IsVerificationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtService_IsVerificationToken_Call) Return(isValid bool, userId int64) *MockJwtService_IsVerificationToken_Call {
	_c.Call.Return(isValid, userId)
	return _c
}

func (_c *MockJwtService_IsVerificationToken_Call) RunAndReturn(run func(token string) (bool, int64)) *MockJwtService_IsVerificationToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function for the type MockJwtService
func (_mock *MockJwtService) ParseToken(token string) (map[string]interface{}, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtService_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockJwtService_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - token
func (_e *MockJwtService_Expecter) ParseToken(token interface{}) *MockJwtService_ParseToken_Call {
	return &MockJwtService_ParseToken_Call{Call: _e.mock.On("ParseToken", token)}
}

func (_c *MockJwtService_ParseToken_Call) Run(run func(token string)) *MockJwtService_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtService_ParseToken_Call) Return(stringToIfaceVal map[string]interface{}, err error) *MockJwtService_ParseToken_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *MockJwtService_ParseToken_Call) RunAndReturn(run func(token string) (map[string]interface{}, error)) *MockJwtService_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}
