// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service_mock

import (
	"auth/internal/messages"
	"auth/internal/repository"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// AddRoleToUser provides a mock function for the type MockAuthService
func (_mock *MockAuthService) AddRoleToUser(userID int64, role *repository.Role) error {
	ret := _mock.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleToUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, *repository.Role) error); ok {
		r0 = returnFunc(userID, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_AddRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoleToUser'
type MockAuthService_AddRoleToUser_Call struct {
	*mock.Call
}

// AddRoleToUser is a helper method to define mock.On call
//   - userID
//   - role
func (_e *MockAuthService_Expecter) AddRoleToUser(userID interface{}, role interface{}) *MockAuthService_AddRoleToUser_Call {
	return &MockAuthService_AddRoleToUser_Call{Call: _e.mock.On("AddRoleToUser", userID, role)}
}

func (_c *MockAuthService_AddRoleToUser_Call) Run(run func(userID int64, role *repository.Role)) *MockAuthService_AddRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*repository.Role))
	})
	return _c
}

func (_c *MockAuthService_AddRoleToUser_Call) Return(err error) *MockAuthService_AddRoleToUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_AddRoleToUser_Call) RunAndReturn(run func(userID int64, role *repository.Role) error) *MockAuthService_AddRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePassword provides a mock function for the type MockAuthService
func (_mock *MockAuthService) ChangePassword(req *messages.PasswordChangeRequest) error {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*messages.PasswordChangeRequest) error); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockAuthService_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - req
func (_e *MockAuthService_Expecter) ChangePassword(req interface{}) *MockAuthService_ChangePassword_Call {
	return &MockAuthService_ChangePassword_Call{Call: _e.mock.On("ChangePassword", req)}
}

func (_c *MockAuthService_ChangePassword_Call) Run(run func(req *messages.PasswordChangeRequest)) *MockAuthService_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*messages.PasswordChangeRequest))
	})
	return _c
}

func (_c *MockAuthService_ChangePassword_Call) Return(err error) *MockAuthService_ChangePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_ChangePassword_Call) RunAndReturn(run func(req *messages.PasswordChangeRequest) error) *MockAuthService_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserData provides a mock function for the type MockAuthService
func (_mock *MockAuthService) GetUserData(userID int64) (*messages.AuthDataResponse, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserData")
	}

	var r0 *messages.AuthDataResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (*messages.AuthDataResponse, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *messages.AuthDataResponse); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.AuthDataResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_GetUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserData'
type MockAuthService_GetUserData_Call struct {
	*mock.Call
}

// GetUserData is a helper method to define mock.On call
//   - userID
func (_e *MockAuthService_Expecter) GetUserData(userID interface{}) *MockAuthService_GetUserData_Call {
	return &MockAuthService_GetUserData_Call{Call: _e.mock.On("GetUserData", userID)}
}

func (_c *MockAuthService_GetUserData_Call) Run(run func(userID int64)) *MockAuthService_GetUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockAuthService_GetUserData_Call) Return(authDataResponse *messages.AuthDataResponse, err error) *MockAuthService_GetUserData_Call {
	_c.Call.Return(authDataResponse, err)
	return _c
}

func (_c *MockAuthService_GetUserData_Call) RunAndReturn(run func(userID int64) (*messages.AuthDataResponse, error)) *MockAuthService_GetUserData_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Login(req *messages.AuthRequest) (*messages.ApiResponse, string, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *messages.ApiResponse
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*messages.AuthRequest) (*messages.ApiResponse, string, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*messages.AuthRequest) *messages.ApiResponse); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.ApiResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*messages.AuthRequest) string); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(*messages.AuthRequest) error); ok {
		r2 = returnFunc(req)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - req
func (_e *MockAuthService_Expecter) Login(req interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", req)}
}

func (_c *MockAuthService_Login_Call) Run(run func(req *messages.AuthRequest)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*messages.AuthRequest))
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(resp *messages.ApiResponse, token string, err error) *MockAuthService_Login_Call {
	_c.Call.Return(resp, token, err)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(req *messages.AuthRequest) (*messages.ApiResponse, string, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Logout(token string) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - token
func (_e *MockAuthService_Expecter) Logout(token interface{}) *MockAuthService_Logout_Call {
	return &MockAuthService_Logout_Call{Call: _e.mock.On("Logout", token)}
}

func (_c *MockAuthService_Logout_Call) Run(run func(token string)) *MockAuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_Logout_Call) Return(err error) *MockAuthService_Logout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_Logout_Call) RunAndReturn(run func(token string) error) *MockAuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Refresh(token string) (string, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockAuthService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - token
func (_e *MockAuthService_Expecter) Refresh(token interface{}) *MockAuthService_Refresh_Call {
	return &MockAuthService_Refresh_Call{Call: _e.mock.On("Refresh", token)}
}

func (_c *MockAuthService_Refresh_Call) Run(run func(token string)) *MockAuthService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_Refresh_Call) Return(s string, err error) *MockAuthService_Refresh_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthService_Refresh_Call) RunAndReturn(run func(token string) (string, error)) *MockAuthService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Register(req *messages.AuthRequest) (*messages.ApiResponse, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *messages.ApiResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*messages.AuthRequest) (*messages.ApiResponse, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*messages.AuthRequest) *messages.ApiResponse); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.ApiResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*messages.AuthRequest) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - req
func (_e *MockAuthService_Expecter) Register(req interface{}) *MockAuthService_Register_Call {
	return &MockAuthService_Register_Call{Call: _e.mock.On("Register", req)}
}

func (_c *MockAuthService_Register_Call) Run(run func(req *messages.AuthRequest)) *MockAuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*messages.AuthRequest))
	})
	return _c
}

func (_c *MockAuthService_Register_Call) Return(resp *messages.ApiResponse, err error) *MockAuthService_Register_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *MockAuthService_Register_Call) RunAndReturn(run func(req *messages.AuthRequest) (*messages.ApiResponse, error)) *MockAuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleFromUser provides a mock function for the type MockAuthService
func (_mock *MockAuthService) RemoveRoleFromUser(userID int64, role *repository.Role) error {
	ret := _mock.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleFromUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, *repository.Role) error); ok {
		r0 = returnFunc(userID, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_RemoveRoleFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleFromUser'
type MockAuthService_RemoveRoleFromUser_Call struct {
	*mock.Call
}

// RemoveRoleFromUser is a helper method to define mock.On call
//   - userID
//   - role
func (_e *MockAuthService_Expecter) RemoveRoleFromUser(userID interface{}, role interface{}) *MockAuthService_RemoveRoleFromUser_Call {
	return &MockAuthService_RemoveRoleFromUser_Call{Call: _e.mock.On("RemoveRoleFromUser", userID, role)}
}

func (_c *MockAuthService_RemoveRoleFromUser_Call) Run(run func(userID int64, role *repository.Role)) *MockAuthService_RemoveRoleFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*repository.Role))
	})
	return _c
}

func (_c *MockAuthService_RemoveRoleFromUser_Call) Return(err error) *MockAuthService_RemoveRoleFromUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_RemoveRoleFromUser_Call) RunAndReturn(run func(userID int64, role *repository.Role) error) *MockAuthService_RemoveRoleFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function for the type MockAuthService
func (_mock *MockAuthService) ResetPassword(req *messages.PasswordChange, token string) error {
	ret := _mock.Called(req, token)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*messages.PasswordChange, string) error); ok {
		r0 = returnFunc(req, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockAuthService_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - req
//   - token
func (_e *MockAuthService_Expecter) ResetPassword(req interface{}, token interface{}) *MockAuthService_ResetPassword_Call {
	return &MockAuthService_ResetPassword_Call{Call: _e.mock.On("ResetPassword", req, token)}
}

func (_c *MockAuthService_ResetPassword_Call) Run(run func(req *messages.PasswordChange, token string)) *MockAuthService_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*messages.PasswordChange), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_ResetPassword_Call) Return(err error) *MockAuthService_ResetPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_ResetPassword_Call) RunAndReturn(run func(req *messages.PasswordChange, token string) error) *MockAuthService_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// SendVerificationEmail provides a mock function for the type MockAuthService
func (_mock *MockAuthService) SendVerificationEmail(email string) error {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_SendVerificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerificationEmail'
type MockAuthService_SendVerificationEmail_Call struct {
	*mock.Call
}

// SendVerificationEmail is a helper method to define mock.On call
//   - email
func (_e *MockAuthService_Expecter) SendVerificationEmail(email interface{}) *MockAuthService_SendVerificationEmail_Call {
	return &MockAuthService_SendVerificationEmail_Call{Call: _e.mock.On("SendVerificationEmail", email)}
}

func (_c *MockAuthService_SendVerificationEmail_Call) Run(run func(email string)) *MockAuthService_SendVerificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_SendVerificationEmail_Call) Return(err error) *MockAuthService_SendVerificationEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_SendVerificationEmail_Call) RunAndReturn(run func(email string) error) *MockAuthService_SendVerificationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUser provides a mock function for the type MockAuthService
func (_mock *MockAuthService) VerifyUser(token string) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthService_VerifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUser'
type MockAuthService_VerifyUser_Call struct {
	*mock.Call
}

// VerifyUser is a helper method to define mock.On call
//   - token
func (_e *MockAuthService_Expecter) VerifyUser(token interface{}) *MockAuthService_VerifyUser_Call {
	return &MockAuthService_VerifyUser_Call{Call: _e.mock.On("VerifyUser", token)}
}

func (_c *MockAuthService_VerifyUser_Call) Run(run func(token string)) *MockAuthService_VerifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_VerifyUser_Call) Return(err error) *MockAuthService_VerifyUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthService_VerifyUser_Call) RunAndReturn(run func(token string) error) *MockAuthService_VerifyUser_Call {
	_c.Call.Return(run)
	return _c
}
