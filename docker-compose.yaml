services:
  # Template
  #
  db:
    image: postgres:17.4
    container_name: db
    restart: always
    environment:
      - TZ=Asia/Aqtobe
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      internal:
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 1s
      timeout: 1s
      retries: 100

  nats:
    image: nats:2.11.3
    container_name: nats
    networks:
      internal:

  redis:
    image: redis:8.0.1
    container_name: redis
    environment:
      - TZ=Asia/Aqtobe
      - REDIS_PASSWORD=
      - REDIS_PORT=6379
    networks:
      internal:
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 1s
        timeout: 1s
        retries: 100

  gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: api-gateway
    restart: always
    environment:
      - TZ=Asia/Aqtobe
    ports:
      - "80:8080"
    networks:
      internal:
    depends_on:
      db:
          condition: service_healthy
      redis:
          condition: service_healthy

  appointment:
    build:
      context: .
      dockerfile: apps/appointment/Dockerfile
    container_name: appointment
    restart: always
    environment:
      - TZ=Asia/Aqtobe
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
    networks:
      internal:
    depends_on:
      db:
          condition: service_healthy
      redis:
          condition: service_healthy

  auth:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
    container_name: auth
    restart: always
    environment:
      - TZ=Asia/Aqtobe
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=postgres
      - APP_PORT=8080
      - LOGGER_LEVEL=debug
      - NATS_URL=nats://nats:4222
    depends_on:
      db:
        condition: service_healthy
    networks:
      internal:
    ports:
      - "8000:8000"

  doctor:
    build:
      context: .
      dockerfile: apps/doctor/Dockerfile
    container_name: doctor
    environment:
      - TZ=Asia/Aqtobe
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=postgres

  notification:
    build:
      context: .
      dockerfile: apps/notification/Dockerfile
    container_name: notification
    environment:
      - TZ=Asia/Aqtobe
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=postgres
      - NATS_URL=nats://nats:4222
      - LOGGER_LEVEL=debug
    depends_on:
      db:
        condition: service_healthy
    networks:
      internal:

  patient:
    build:
      context: .
      dockerfile: apps/patient/Dockerfile
    container_name: patient
    environment:
      - TZ=Asia/Aqtobe
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=postgres

  user:
    build:
      context: .
      dockerfile: apps/user/Dockerfile
    container_name: user
    environment:
      - TZ=Asia/Aqtobe
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=postgres

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    environment:
      - TZ=Asia/Aqtobe
    volumes:
      - ./config/prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      internal:


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "30000:3000"
    volumes:
      - ./config/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - TZ=Asia/Aqtobe
    depends_on:
      - prometheus
    networks:
      internal:

volumes:
  db_data:

networks:
  internal:
